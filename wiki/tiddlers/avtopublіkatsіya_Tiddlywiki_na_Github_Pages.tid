created: 20161215210632927
headingorder: 110
modified: 20161215215940107
tags: [[Встановлення ТВ]]
title: Автопублікація Tiddlywiki на Github Pages
type: text/vnd.tiddlywiki

> Текст перекладений [[oleghbond|https://github.com/oleghbond]] з [[оригінальної інструкції Danielo Rodríguez|https://github.com/danielo515/TW5-auto-publish2gh-pages]].

Ми всі любимо ~GitHub сторінки (~GitHub Pages). Це легкий, надійний і дешевий спосіб для розміщення статичних сайтів. ~TiddlyWiki - це веб застосунок, що може бути розміщений у вигляді єдиного HTML-файлу. Це дивовижний унікальний застосунок, і я наполегливо рекомендую вам відвідати його на [[TiddlyWiki.com|http://TiddlyWiki.com]]. Але проблема з ~TiddlyWiki полягає в тому, що не існує простого швидкого способу для розміщення ~TiddlyWiki файлу на ~GitHub сторінках ... принаймні до сих пір.

Ця інструкція є одночасно і шаблоном, і набором інструкцій з розміщення ~TiddlyWiki на власному Github репозитарії. Виконавши всі кроки інструкції ви зможете запустити свою власну вікі в мережі Інтернет менш ніж за 10 хвилин без будь-яких знань Git або ~Github, а також без встановлення будь-якого програмного забезпечення на вашому комп'ютері.

Використання цього підходу надає низку переваг: 

# ~GitHub сторінки абсолютно безкоштовні та надійні. 
# Тідлери (статті) побудовані з окремих файлів з розширенням `.tid`. 
# Ви отримуєте вбудований контроль версій вашої вікі. 
# Github дозволяє редагувати і додавати файли безпосередньо з Інтернет інтерфейсу, отже вам не потрібно нічого встановлювати на вашому комп'ютері. 
# Вам не потрібні знання Git або Github.

!! Передумови

Перелік передумов досить короткий і вам потрібно виконати їх лише один раз, а саме, отримати облікові записи на:

* [[Github|https://github.com/]]
* [[Travis-ci|https://travis-ci.org/]]

!! Початкове встановлення

Перераховані нижче кроки необхідні для початкового встановлення. Після того, як ви пройдете їх вперше, додавання наступних вікі для вас стане набагато швидшим і простішим.

!! Встановлення Github

# Спочатку нам потрібно створити персональний код доступу (Personal access token), щоб дозволити скриптам публікувати на нашому ~GitHub. Все це необхідно лише для першого встановлення. Перейдіть на [[сторінку управління кодами GitHub|https://github.com/settings/tokens]]
# Створіть новий код клацнувши на `Generate new token`.
# Додайте якийсь зрозумілий опис коду. Це дуже важливо, тому що за цим дескриптором вам доведеться ідентифікувати використання вашого коду.
# Переконайтеся, що опції `repo` і `public_repo` відмічені.
# Натисніть `Generate token` як вказано нижче:<div>
[img[01-github-token.png]]</div>
# Github згенерує унікальний код. Занотуйте його прямо зараз, тому що більше ви не матимете такої можливості!!

!! Створення першої вікі

@@float:right;padding-left:10pt; [img[10-fork.png]]@@

# Зробіть гілку цього репозиторія. Цей крок буде необхідний для створення кожної нової вікі. Ви можете зробити це прямо з Github, просто натисніть кнопку `Гілка` (`Fork`) у верхньому правому кутку цієї сторінки:
# Після створення нової гілки репозиторія перейменуйте його відповідно до ваших потреб.
# Увійдіть до [[Travis-ci|https://travis-ci.org/]], використовуючи обліковий запис ~GitHub.
# Якщо ви використовуєте Travis вперше, просто надайте програмі доступ до вашого облікового запису ~GitHub.
# Після того, як ви отримали доступ до вашого облікового запису Travis, ви будете перенаправлені на панель управління.
# На лівій стороні панелі управління ви побачите список ваших репозитаріїв під керуванням Travis. Спочатку цей список буде порожнім.
# @@float:right;padding-left:10pt; [img[02-Travis-CI_addRepo.png]]@@ Натисніть на знак ''плюс'' поруч з `My Repositories` для додавання вашого репозитарію під керування Travis.
# Ви будете перенаправлені до свого профілю. Знайдіть тут ваш новий репозитарій і активуйте "перемикач" так, щоб поставити його під керування Travis. Це буде легко зробити, тому що Travis надає пояснювальний знімок екрана.
# @@float:right;padding-left:10pt; [img[03-Travis-CI_sync.png]]@@ Якщо ви не знайшли репозиторій, що ви шукаєте, натисніть кнопку синхронізації `Sync` для оновлення списку репозиторіїв.
# У нашому прикладі ми активізуємо цей репозиторій ~Github:<div>
[img[04-Travis-CI_activate.png]]</div>
# Тепер настав час встановити глобальні змінні, необхідні для наших сценаріїв збірки. Для цього натисніть на значок ''шестерінки'' праворуч перемикача ''активувати'':<div>
[img[05-Travis-CI_config.png]]</div>
# Ви будете перенаправлені на сторінку налаштування репозитарію. Залиште загальні налаштування за замовчанням.
# У розділі ''Змінні середовища'' (''Environment Variables'') ми збираємося додати необхідні змінні.
## Спочатку додайте `GH_REF`. Це адреса вашого нового репозитарію без префікса `https://` і з розширенням `.git`. Встановіть перемикач відображення для цієї змінної `Display value in build log` у положення ''ON'', щоб значення змінної відображалось щоразу в журналі збірки. Натисніть додати:<div>
[img[06-Travis-CI_GH_REF.png]]</div>
## Дотримуючись аналогічної послідовності додайте змінну `GH_TOKEN`, але цього разу переконайтеся, що значення відображення в журналі збірки ''відключене'' з міркувань безпеки. Вставте тут код ~GitHub, що ми згенерували раніше:<div>
[img[07-Travis-CI_GH_TOKEN.png]]</div>
## Дотримуючись аналогічної послідовності додайте змінну `GH_EMAIL`. Це має бути адреса вашої електронної пошти, що ви використовували для реєстрації на ~GitHub. Після завершення цього процесу ви побачите щось на зразок такого:<div>
[img[08-Travis-CI_Variables.png]]</div>
## Зміни зберігаються автоматично. Отже ми закінчили з налаштуванням і можемо переключитися на вкладку ''Current''.
# Перейдіть на вкладку  ''Current'', щоб побачити, що відбувається під час процесу збірки. Процес збірки відбувається щоразу, щойно ви вносите зміни (``push``) до репозиторію, але не раніше. Триваюча збірка виглядає так:<div>
[img[09-Travis-CI_Building.png]]</div>
# Тепер ви готові йти далі. Відредагуйте будь-який файл або створіть новий файл у своєму новому репозиторії, після чого збережіть зміни (''Commit changes''), щоб запустити чергову збірку. Ви можете зробити це прямо з ~Github.
# Після успішного завершення збірки для того, щоб побачити результати, ви можете просто відвідати веб-сторінку за адресою
#>`<your-git-username>.github.io/your-repo-name`.

!! Створення іншої вікі

Після завершення початкового встановлення тепер набагато простіше встановити іншу вікі. Ось короткий виклад необхідних кроків: 

# @@float:right;margin-left:10pt; [img[10-fork.png]]@@ Зробіть нову гілку вашого репозиторію.
# Перейменуйте репозиторій відповідно до ваших потреб. 
# Увійдіть до [[Travis-ci|https://travis-ci.org/]], використовуючи обліковий запис ~GitHub. 
# @@float:right;margin-left:10pt; [img[02-Travis-CI_addRepo.png]]@@ На лівій стороні панелі управління клацніть знак ''плюс'' поруч з `My Repositories` для додавання вашого репозитарія під керування Travis.
# Знайдіть тут ваш новий репозитарій і активуйте "перемикач", щоб поставити його під керування Travis. 
# @@float:right;margin-left:10pt; [img[03-Travis-CI_sync.png]]@@ Якщо ви не знайшли репозиторій, що ви шукаєте, натисніть кнопку синхронізації для оновлення списку репозиторіїв.
# Встановіть глобальні змінні.
# Відредагуйте/додайте потрібні тідлери і збережіть зміни. Це може бути зроблено безпосередньо на ~GitHub.

!! Заключні нотатки від перекладача

Дотримуючись цієї чудової інструкції майже одразу досягаєш поставленої мети. Респект Даніелу!

Однак інструкції бракує опису ролі двох файлів, на які я звернув увагу після того, як збірка пішла не так. Ці два файли я знайшов у корені  [[репозитарію Даніела|https://github.com/danielo515/TW5-auto-publish2gh-pages]]:

* `.travis.yml` - сценарій управління збіркою;
* `publish.sh` - сценарій опублікування результатів збірки на ~GitHub сторінках.

Після перенесення цих файлів у свій репозитарій збірка пішла як потрібно. Мені лише прийшлося дещо підкоригувати для своїх потреб вміст конфігураційного файлу Тідлівікі `tiddlywiki.info` в розділі `build`.

Остання ремарка дотична інструменту редагування вмісту, для чого з моєї точки зору краще використовувати власне Тідлівікі. Це можна робити принаймні двома шляхами:

# Найпростіший варіант: Скачайте собі на комп'ютер порожню вікі [[empty.html|Встановлення ТВ на комп'ютер]] із сайту Тідлівікі. Відкрийте новий тідлер. Створіть потрібний контент. Перегляньте як він виглядає в режимі перегляду. У разі прийнятного результату //copy-and-paste// вікі-код тексту у відповідний тідлер у своєму репозитарії. 
# Більш цікавий варіант: створіть копію свого репозитарію з ~GitHub на своєму локальному комп'ютері методами Git. Встановіть Node.js на своєму локальному комп'ютері і запустіть свою вікі на власному комп'ютері під управлінням Node.js (див. [[приклад для Windows|ТВ на node.js і Windows]]). Після внесення змін або додавання матеріалу до вікі на комп'ютері синхронізуйте вміст (commit and push changes) з мастер-копією на ~GitHub. 
